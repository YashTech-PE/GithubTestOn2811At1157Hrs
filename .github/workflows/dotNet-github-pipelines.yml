name: Dotnet
on:
  push:
    branches:
      - dev
      - test
      - main
env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_TASK_DEFINITION: ${{ vars.ECS_TASK_DEFINITION }}
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: actions/checkout@v2
        uses: actions/checkout@v2
      - name: Restore
        run: dotnet restore MySolution.sln
      - name: Build
        run: dotnet build MySolution.sln --configuration Release
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: >
          # Build a docker container and

          # push it to ECR so that it can

          # be deployed to ECS.

          ls

          pwd

          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          echo "::set-output
          name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  DeployOnTEST:
    name: TEST
    runs-on: ubuntu-latest
    environment: TEST
    needs: build
    steps:
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: >-
          aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: >-
          aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
